---
import { getCollection } from 'astro:content';
import Layout from '../../components/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import { slugify, formatBlogPosts } from '../../utils/content-utils';

export async function getStaticPaths() {
  const posts = await getCollection('ilcommissariogpt');
  const formattedPosts = formatBlogPosts(posts, {
    sortByDate: false,
  });
  return formattedPosts.map(post => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
}

const { post } = Astro.props;
const { Content, headings } = await post.render();
const toc = headings.filter(h => h.depth > 1 && h.depth < 4);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  pageType="article"
  page={{
    title: post.data.title,
    description: post.data.description,
    author: post.data.author,
    publishDate: post.data.date,
    tags: post.data.tags,
  }}
>
  <div class="post-container">
    <article class="post-content">
      <header class="post-header">
        <h1 class="post-title">{post.data.title}</h1>
        <div class="post-meta">
          <time class="post-date" datetime={post.data.date.toISOString()}>
            {new Date(post.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
          </time>
          <span class="author">by {post.data.author}</span>
        </div>
        {post.data.tags && (
          <div class="tags">
            {post.data.tags.map(tag => (
              <a href={`/tags/${slugify(tag)}`} class="tag">#{tag}</a>
            ))}
          </div>
        )}
      </header>
      <div class="prose">
        <Content />
      </div>
    </article>

    {toc.length > 0 && (
      <aside class="toc-container">
        <TableOfContents headings={toc} />
      </aside>
    )}
  </div>
</Layout>

<style>
  .post-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: calc(var(--grid-unit) * 8);
    max-width: 1200px;
    margin: 0 auto;
  }

  @media (min-width: 992px) {
    .post-container {
      grid-template-columns: 240px 1fr;
    }

    .toc-container {
      order: -1;
    }
  }

  .post-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .post-header {
    margin-bottom: calc(var(--grid-unit) * 6);
    text-align: center;
  }

  .post-title {
    font-family: var(--font-heading-primary);
    font-size: 3rem;
    font-weight: 900;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.1;
    margin-bottom: calc(var(--grid-unit) * 3);
  }

  .post-meta {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: flex;
    justify-content: center;
    gap: calc(var(--grid-unit) * 4);
    margin-bottom: calc(var(--grid-unit) * 3);
  }

  .tags {
    display: flex;
    justify-content: center;
    gap: calc(var(--grid-unit) * 2);
    flex-wrap: wrap;
  }

  .tag {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-accent);
    text-decoration: none;
    padding: calc(var(--grid-unit) / 2) var(--grid-unit);
    border: 1px solid var(--color-accent);
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .tag:hover,
  .tag:focus {
    background-color: var(--color-accent);
    color: white;
  }

  .prose {
    font-size: 1.125rem;
    line-height: 1.7;
  }

  .toc-container {
    position: sticky;
    top: calc(var(--grid-unit) * 8);
    align-self: start;
  }

  @media (max-width: 991px) {
    .toc-container {
      display: none; /* Hide TOC on smaller screens for now */
    }
  }
</style>
